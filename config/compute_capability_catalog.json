{
  "computeCapabilities": [
    {
      "id": "model:FinancialMetricsScorer_v1",
      "name": "Financial Metrics Scorer",
      "description": "Calculates a score component from financial data.",
      "inputs": {
        "financial_data": "object"
      },
      "outputs": {
        "component_score": "number"
      }
    },
    {
      "id": "model:QualitativeMetricsScorer_v1",
      "name": "Qualitative Metrics Scorer",
      "description": "Calculates a score component from qualitative data.",
      "inputs": {
        "qualitative_data": "object"
      },
      "outputs": {
        "component_score": "number"
      }
    },
    {
      "id": "logic:WeightedAverageAdjuster_v1",
      "name": "Weighted Average Adjuster",
      "description": "Combines component scores using weights and applies adjustments.",
      "inputs": {
        "score1": "number",
        "weight1": "number",
        "score2": "number",
        "base_score_params": "object"
      },
      "outputs": {
        "final_score": "number",
        "calculated_segment": "string"
      }
    },
    {
      "id": "connector:LoadData_v1",
      "name": "Data Loader",
      "description": "Loads data from a specified source configuration.",
      "inputs": {
        "source_config": "object"
      },
      "outputs": {
        "data": "object"
      }
    },
    {
      "id": "logic:AggregateFields_v2",
      "name": "Field Aggregator",
      "description": "Aggregates fields from multiple data inputs based on a map.",
      "inputs": {
        "data1": "object",
        "data2": "object",
        "field_map_config": "string",
        "deduplication_rule": "string"
      },
      "outputs": {
        "aggregated_result": "object"
      }
    },
    {
      "id": "compute:CalculateRatio",
      "name": "Ratio Calculator",
      "description": "Calculates a ratio from numerator and denominator.",
      "inputs": {
        "numerator": "number",
        "denominator": "number"
      },
      "outputs": {
        "result": "number"
      }
    },
    {
      "id": "cc:CalculateRatio_v1",
      "name": "Basic Ratio Calculator",
      "description": "Calculates numerator / denominator. Raises error for zero denominator.",
      "skill_plugin_name": "BasicCalculations",
      "skill_function_name": "calculate_ratio",
      "inputs": [
        {
          "name": "numerator",
          "type": "float",
          "description": "The numerator value."
        },
        {
          "name": "denominator",
          "type": "float",
          "description": "The denominator value."
        }
      ],
      "outputs": [
        {
          "name": "result",
          "type": "float",
          "description": "The calculated ratio (numerator/denominator)."
        }
      ]
    },
    {
      "id": "cc:SimpleScorer_v1",
      "name": "Simple Metric Scorer",
      "description": "Compares a metric against a threshold with an operator.",
      "skill_plugin_name": "BasicCalculations",
      "skill_function_name": "simple_scorer",
      "inputs": [
        {
          "name": "financial_metric",
          "type": "float",
          "description": "The metric value to score."
        },
        {
          "name": "threshold",
          "type": "float",
          "description": "The threshold value to compare against."
        },
        {
          "name": "operator",
          "type": "string",
          "description": "Comparison operator (e.g., '>', '<', '=='). Defaults to '>' if not provided.",
          "optional": true
        }
      ],
      "outputs": [
        {
          "name": "assessment",
          "type": "string",
          "description": "String indicating the result of the comparison (e.g., 'Above Threshold')."
        }
      ]
    },
    {
      "id": "urn:adk:capability:financial_analysis_agent:v1",
      "name": "Financial Analysis Agent",
      "description": "Agent that calculates ratios and generates textual summaries using skills and SharedContext.",
      "agent_type": "AnalysisAgent",
      "skill_plugin_name": "FinancialAnalysis",
      "skill_function_name": "calculate_basic_ratios",
      "inputs": [
        {
          "name": "roundingPrecision",
          "type": "integer",
          "optional": true,
          "description": "Precision for rounding calculated ratios."
        }
      ],
      "outputs": [
        {
          "name": "analysis_summary_output",
          "type": "object",
          "description": "Summary of analysis performed, including status, messages, and results from skills."
        }
      ]
    },
    {
      "id": "urn:adk:capability:standard_data_ingestor:v1",
      "name": "Standard Data Ingestor Agent",
      "description": "Agent responsible for ingesting initial data from various sources (direct inputs or conceptual file paths) into SharedContext for subsequent agents to use.",
      "agent_type": "DataIngestionAgent",
      "inputs": [
        {
          "name": "companyName",
          "type": "string",
          "optional": true,
          "description": "Company name. Stored in SharedContext if provided."
        },
        {
          "name": "companyTicker",
          "type": "string",
          "optional": true,
          "description": "Company stock ticker. Stored in SharedContext if provided."
        },
        {
          "name": "financialStatementData",
          "type": "object",
          "optional": true,
          "description": "Direct input for financial data. Used as a fallback if 'fullFinancialStatementFilePath' is not provided, or for basic ratio compatibility. The agent may attempt to derive an expanded structure from this if possible."
        },
        {
          "name": "mockStructuredFinancialsForLLMSummary",
          "type": "object",
          "optional": true,
          "description": "Direct input for mock structured financials, typically for LLM summary generation. Used as fallback if 'mockFinancialsFilePath' is not provided."
        },
        {
          "name": "riskFactorsText",
          "type": "string",
          "optional": true,
          "description": "Direct input for risk factors text. Used as fallback if 'riskFactorsFilePath' is not provided."
        },
        {
          "name": "riskFactorsFilePath",
          "type": "string",
          "optional": true,
          "description": "Conceptual path to a file containing risk factors text. If provided, its content is prioritized over 'riskFactorsText'."
        },
        {
          "name": "mockFinancialsFilePath",
          "type": "string",
          "optional": true,
          "description": "Conceptual path to a file containing mock structured financials. If provided, its content is prioritized over 'mockStructuredFinancialsForLLMSummary'."
        },
        {
          "name": "fullFinancialStatementFilePath",
          "type": "string",
          "optional": true,
          "description": "Conceptual path to a file containing full/expanded financial statement data. If provided, its content is prioritized over 'financialStatementData' for populating 'financial_data_for_ratios_expanded'."
        },
        {
          "name": "documentURI",
          "type": "string",
          "optional": true,
          "description": "A URI for a primary document. Currently not processed by the agent; intended for future extension."
        },
        {
          "name": "documentType",
          "type": "string",
          "optional": true,
          "description": "Type of the primary document if URI is provided. Currently not processed by the agent; intended for future extension."
        },
        {
          "name": "text_files_to_ingest",
          "type": "array",
          "optional": true,
          "description": "A list of text files to ingest. Each item in the list should be an object with 'file_path' and 'context_key'.",
          "items": {
            "type": "object",
            "properties": {
              "file_path": {"type": "string", "description": "Path to the text file."},
              "context_key": {"type": "string", "description": "Key to use for storing content in SharedContext."}
            },
            "required": ["file_path", "context_key"]
          }
        }
      ],
      "outputs": [
        {
          "name": "ingestion_summary",
          "type": "object",
          "description": "Summary of the data ingestion process, including status and a list of keys for data items the agent attempted to store in SharedContext.",
          "properties": {
            "status": {
              "type": "string",
              "description": "Indicates the status of the ingestion (e.g., 'success')."
            },
            "agent": {
              "type": "string",
              "description": "Name of the agent performing the ingestion."
            },
            "message": {
              "type": "string",
              "description": "A message detailing the outcome or process."
            },
            "attempted_to_store_keys": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of keys the agent attempted to store in SharedContext."
            }
          }
        }
      ]
    },
    {
      "id": "urn:adk:capability:standard_report_generator:v1",
      "name": "Standard Report Generator Agent",
      "description": "Agent responsible for assembling the final report from SharedContext.",
      "agent_type": "ReportGenerationAgent",
      "inputs": [
        {"name": "report_title_detail", "type": "string", "optional": true, "description": "Specific detail to add to the report title."},
        {"name": "fundamental_analysis_data_ref", "type": "object", "optional": true, "description": "Output from a fundamental analysis step. Orchestrator wraps this in 'value'."},
        {"name": "snc_analysis_data_ref", "type": "object", "optional": true, "description": "Output from an SNC analysis step. Orchestrator wraps this in 'value'."},
        {"name": "catalyst_data_ref", "type": "object", "optional": true, "description": "Output from a Catalyst agent step. Orchestrator wraps this in 'value'."},
        {"name": "output_dir", "type": "string", "optional": true, "description": "Directory where the report file should be conceptually saved. Passed from CACM input."}
      ],
      "outputs": [
        {
          "name": "report_package",
          "type": "object",
          "description": "A package containing the report content and its conceptual file path.",
          "properties": {
            "content": {"type": "string", "description": "The report content."},
            "file_path": {"type": "string", "description": "The conceptual file path of the report."},
            "status_message": {"type": "string", "description": "Status message from report generation."}
          }
        }
      ]
    },
    {
      "id": "urn:adk:capability:fundamental_analyst_agent:v1",
      "name": "Fundamental Analyst Agent",
      "description": "Performs fundamental analysis of a company, including financial ratios, DCF valuation, and financial health assessment. Supports custom summary guidance and DCF parameter overrides.",
      "agent_type": "FundamentalAnalystAgent",
      "inputs": [
        {
          "name": "company_id",
          "type": "string",
          "description": "The unique identifier for the company to be analyzed."
        },
        {
          "name": "summary_guidance_prompt_addon",
          "type": "string",
          "optional": true,
          "description": "Additional user-provided guidance or a full custom prompt for the analysis summary generation."
        },
        {
          "name": "dcf_override_discount_rate",
          "type": "float",
          "optional": true,
          "description": "Override for the DCF discount rate (e.g., 0.085 for 8.5%). If 0 or not provided, uses default from agent's data source."
        },
        {
          "name": "dcf_override_terminal_growth_rate",
          "type": "float",
          "optional": true,
          "description": "Override for the DCF terminal growth rate (e.g., 0.025 for 2.5%). If 0 or not provided, uses default from agent's data source."
        }
      ],
      "outputs": [
        {
          "name": "analysis_result",
          "type": "object",
          "description": "The comprehensive analysis results, including ratios, valuations, and summaries."
        }
      ]
    },
    {
      "id": "urn:adk:capability:snc_analyst_agent:v1",
      "name": "SNC Analyst Agent",
      "description": "Performs Shared National Credit (SNC) analysis for a company, assigning an SNC rating and providing a rationale.",
      "agent_type": "SNCAnalystAgent",
      "inputs": [
        {
          "name": "company_id",
          "type": "string",
          "description": "The unique identifier for the company to be analyzed for SNC rating."
        }
      ],
      "outputs": [
        {
          "name": "snc_analysis_result",
          "type": "object",
          "description": "The SNC analysis results, including the rating and rationale.",
          "properties": {
            "rating": {
              "type": [
                "string",
                "null"
              ],
              "description": "The assigned SNC rating (e.g., Pass, Substandard) or null if not determined."
            },
            "rationale": {
              "type": "string",
              "description": "The justification for the assigned SNC rating."
            }
          }
        }
      ]
    },
    {
      "id": "urn:adk:capability:data_retrieval_agent:v1",
      "name": "Data Retrieval Agent",
      "description": "Retrieves various types of data (e.g., company financials, market data) using mock data, overrides, or external APIs (e.g., Alpha Vantage). Supports data overrides for testing.",
      "agent_type": "DataRetrievalAgent",
      "inputs": [
        {
          "name": "company_id",
          "type": "string",
          "description": "The unique identifier for the company or entity for which data is requested."
        },
        {
          "name": "data_type",
          "type": "string",
          "optional": true,
          "description": "Specifies the type of data to retrieve (e.g., 'get_company_financials', 'market_data'). Defaults to 'get_company_financials'."
        },
        {
          "name": "data_override",
          "type": "object",
          "optional": true,
          "description": "Allows passing a complete data package to be returned directly by the agent, bypassing other retrieval logic."
        },
        {
          "name": "api_source",
          "type": "string",
          "optional": true,
          "description": "Specifies the external API to use for data retrieval (e.g., 'AlphaVantage'). If omitted, defaults to mock/predefined data sources."
        },
        {
          "name": "api_key",
          "type": "string",
          "optional": true,
          "description": "API key for the specified 'api_source'. If omitted, the agent may try to use a preconfigured key or an environment variable."
        }
      ],
      "outputs": [
        {
          "name": "retrieved_data",
          "type": "object",
          "description": "The data package retrieved by the agent. Structure depends on the data_type requested."
        }
      ]
    },
    {
      "id": "urn:adk:capability:catalyst_wrapper_agent:v1",
      "name": "Catalyst Wrapper Agent",
      "description": "Wraps the original CatalystAgent to identify strategic opportunities, structure deals, and generate reports.",
      "agent_type": "CatalystWrapperAgent",
      "inputs": [
        {
          "name": "client_id",
          "type": "string",
          "description": "The client identifier for analysis."
        },
        {
          "name": "company_id",
          "type": "string",
          "description": "The company identifier for analysis."
        },
        {
          "name": "industry",
          "type": "string",
          "description": "The industry context for analysis."
        },
        {
          "name": "catalyst_config_path",
          "type": "string",
          "optional": true,
          "description": "Optional path to the catalyst_config.json file if different from the default."
        }
      ],
      "outputs": [
        {
          "name": "catalyst_output",
          "type": "object",
          "description": "The output from the CatalystAgent, typically including identified opportunities, deal structures, or reports."
        }
      ]
    },
    {
      "id": "urn:adk:capability:knowledge_graph_query_agent:v1",
      "name": "Knowledge Graph Query Agent",
      "description": "Executes a SPARQL query against a specified local Knowledge Graph (RDF/TTL) file and returns the results.",
      "agent_type": "KnowledgeGraphAgent",
      "inputs": [
        {
          "name": "sparql_query",
          "type": "string",
          "description": "The SPARQL query to be executed."
        },
        {
          "name": "kg_file_path",
          "type": "string",
          "optional": true,
          "description": "Path to the local Knowledge Graph file (e.g., .ttl, .rdf). Defaults to 'knowledge_graph_instantiations/kb_core_instances.ttl' relative to project root if not provided."
        }
      ],
      "outputs": [
        {
          "name": "query_results_package",
          "type": "object",
          "description": "The results of the SPARQL query execution.",
          "properties": {
            "query_executed": {
              "type": "string"
            },
            "kg_file_used": {
              "type": "string"
            },
            "results_count": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      ]
    }
  ]
}
