import logging
from typing import Dict, Any
import json # For pretty printing in run method

from cacm_adk_core.agents.base_agent import Agent
from cacm_adk_core.semantic_kernel_adapter import KernelService
from cacm_adk_core.context.shared_context import SharedContext # Added

# logger = logging.getLogger(__name__) # Will use instance logger

class ReportGenerationAgent(Agent):
    """
    Agent responsible for generating reports based on provided data and analysis.
    """
    def __init__(self, kernel_service: KernelService):
        """
        Initializes the ReportGenerationAgent.

        Args:
            kernel_service (KernelService): The service providing access to the Semantic Kernel.
        """
        super().__init__(agent_name="ReportGenerationAgent", kernel_service=kernel_service)

    async def run(self, task_description: str, current_step_inputs: Dict[str, Any], shared_context: SharedContext) -> Dict[str, Any]:
        """
        Executes the report generation task.

        Args:
            task_description (str): Description of the report to be generated.
            current_step_inputs (Dict[str, Any]): Inputs specific to this step.
            shared_context (SharedContext): The shared context for this CACM run.

        Returns:
            Dict[str, Any]: Results of the execution, including status and report reference/content.
        """
        self.logger.info(f"'{self.agent_name}' received task: {task_description} with inputs: {current_step_inputs}")
        self.logger.info(f"Operating with SharedContext ID: {shared_context.get_session_id()} (CACM ID: {shared_context.get_cacm_id()})")

        report_title_detail = current_step_inputs.get("report_title_detail", "Generic Report")

        final_report_content = f"Report Title: {report_title_detail} (Task: {task_description})\n"
        final_report_content += f"Generated by: {self.agent_name} for CACM ID: {shared_context.get_cacm_id()}\n\n"

        # Incorporate any data passed directly to this step via current_step_inputs
        if current_step_inputs:
            final_report_content += "--- Data from Current Step Inputs ---\n"
            final_report_content += f"{json.dumps(current_step_inputs, indent=2)}\n\n"

        # Example: Retrieve a document reference from shared_context if DataIngestionAgent ran
        main_doc_ref = shared_context.get_document_reference("10K_FILING") # Example doc_type
        if main_doc_ref:
            final_report_content += f"--- Referenced Document (from SharedContext) ---\n"
            final_report_content += f"10K Filing Path: {main_doc_ref}\n\n"

        # Check for stored results (e.g., from AnalysisAgent via receive_analysis_results)
        if hasattr(self, 'stored_results') and self.stored_results:
            self.logger.info(f"'{self.agent_name}' found {len(self.stored_results)} stored result(s) to include in the report.")
            final_report_content += "--- Dynamically Received Analysis Results ---\n"
            for i, res_item in enumerate(self.stored_results):
                final_report_content += f"Result Item {i+1}:\n"
                final_report_content += f"  From Agent: {res_item.get('from', 'Unknown')}\n"
                final_report_content += f"  Data: {json.dumps(res_item.get('data',{}), indent=2)}\n\n" # Pretty print the dict
        else:
            self.logger.info(f"'{self.agent_name}' has no specific stored results to include in this report instance.")
            final_report_content += "No additional analysis results were dynamically received by this agent instance for this report.\n"

        final_report_content += "\n--- End of Report (Placeholder) ---"

        self.logger.info(f"'{self.agent_name}' completed report generation task.")
        return {
            "status": "success",
            "agent": self.agent_name,
            "message": "Report generation placeholder completed.",
            "report_content": final_report_content
        }

    async def receive_analysis_results(self, sending_agent_name: str, results: Dict[str, Any]):
        """
        Receives analysis results from another agent.
        """
        self.logger.info(f"'{self.agent_name}' received analysis results from '{sending_agent_name}'.")
        # Store or process these results
        if not hasattr(self, 'stored_results'):
            self.stored_results = []
        self.stored_results.append({ "from": sending_agent_name, "data": results})
        self.logger.info(f"Results from '{sending_agent_name}' stored. Total stored items: {len(self.stored_results)}")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    from semantic_kernel import Kernel
    # Mock KernelService for testing
    import json # Added for pretty printing in test run
    class MockKernelService(KernelService):
        def __init__(self):
            self._kernel = Kernel()
            self.logger_main = logging.getLogger("__main__") # Use main logger for mock service logs
            self.logger_main.info("MockKernelService for ReportGenerationAgent initialized.")

        def get_kernel(self):
            return self._kernel

        def _initialize_kernel(self): pass

    mock_service = MockKernelService()
    report_agent = ReportGenerationAgent(kernel_service=mock_service)

    import asyncio
    async def test_run():
        mock_shared_context_report = SharedContext(cacm_id="test_report_gen_cacm")
        # Simulate AnalysisAgent having stored some results via receive_analysis_results
        await report_agent.receive_analysis_results(
            "AnalysisAgent_Test",
            {"summary": "Test analysis summary", "value": 42}
        )
        # Simulate DataIngestionAgent having added a doc ref
        mock_shared_context_report.add_document_reference("10K_FILING", "processed/XYZ_10K_2023.txt")

        result = await report_agent.run(
            task_description="Generate a final financial overview.",
            current_step_inputs={"report_title_detail": "Q1 Financial Overview", "audience": "management"},
            shared_context=mock_shared_context_report
        )
        logging.info(f"ReportGenerationAgent run result:\n{result.get('report_content')}")
        mock_shared_context_report.log_context_summary()

    asyncio.run(test_run())
